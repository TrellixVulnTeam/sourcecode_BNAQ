#pragma once
#include "..\..\Inc\Control\ICtrlRadioBox.h"

class ICtrlRadioBoxImpl : public ICtrlRadioBox
{
public:
	ICtrlRadioBoxImpl(IUiFeatureKernel *pUiKernel);
	virtual ~ICtrlRadioBoxImpl();

	// 设置文字
	void SetText(LPCWSTR pText, bool bRedraw);

	// 设置选中属性
	void SetCheck(bool bCheck);

	// 取得选中属性
	bool GetCheck();

	//设置分组ID
	virtual void SetGroupID(int nGroupId);

	//获取分组ID
	virtual int GetGroupID();

protected:
	// 派生控件用于创建属于自己的控件属性
	// bIsNewCtrl：true时说明是Builder调用，新创建一个控件，需要初始化属性的各个默认值
	// false：说明整个皮肤包已经初始化完毕，属性创建完毕的时候，从xml中读取的属性值已经赋值完毕了，不能再初始化，否则xml中的值会被冲掉
	virtual bool CreateControlPropetry(bool bIsNewCtrl);
	// 初始化控件
	virtual void OnCreate();
	// 控件初始化完毕
	virtual void OnFinalCreate();
	// 销毁控件
	virtual void OnDestroy();
	// 绘制控件
	virtual void OnPaint(CDrawingBoard &DrawBoard);
	// 鼠标进入
	virtual void OnMouseEnter(POINT pt);
	// 鼠标移出
	virtual void OnMouseLeave(POINT pt);
	// 鼠标左键点击
	virtual void OnLButtonDown(POINT pt);
	// 鼠标左键抬起
	virtual void OnLButtonUp(POINT pt);
	// 为了整个项目的向下兼容，扩展控件的执行命令接口，每个控件都必须实现，但实现可以为空
	virtual LRESULT ExecuteControlCommand(int nCommandId, WPARAM wParam, LPARAM lParam);

	// 设置控件光标
	virtual IPropertyCursor* OnSetCursor(POINT pt);

private:
	typedef enum enumRadioState
	{
		RadioStateInvaild = -1,
		RadioStateUncheckNormal,
		RadioStateUncheckHot,
		RadioStateUncheckPressed,
		RadioStateUncheckDisabled,
		RadioStateCheckNormal,
		RadioStateCheckHot,
		RadioStateCheckPressed,
		RadioStateCheckDisabled,
		RadioStateNum
	}RADIOSTATE;

private:
	void ChangeRadioState(RADIOSTATE state);

private:
	// 左键是否按下
	bool				m_bIsLButtonDown;

	ULONG				m_mouseFlag;
	// 是否check
	bool				m_bCheck;
	RADIOSTATE			m_enumRadioSate;


	//////////////////////////////////////////////////////////////////////////
	IPropertyImage* m_pPropsBack[RadioStateNum];
	IPropertyImage* m_pPropsBox[RadioStateNum];
	IPropertyImage* m_pPropsGraphic[RadioStateNum];
	IPropertyFont* m_pPropsFont[RadioStateNum];

	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	IPropertyString*	m_pPropText;
	IPropertyBool*		m_pShowText;

	//////////////////////////////////////////////////////////////////////////
	IPropertyInt* m_pGroupID;	//分组ID

	//////////////////////////////////////////////////////////////////////////
	IPropertyBool*		m_pUpDownMode;
	IPropertyInt*		m_pX;
	IPropertyInt*		m_pY;

	IPropertyInt*		m_pTextOffsetLeft;
	IPropertyInt*		m_pTextOffsetBottom;
	IPropertyInt*		m_pTextOffsetTop;
	IPropertyInt*		m_pTextOffsetRight;

	//////////////////////////////////////////////////////////////////////////
	IPropertyCursor*	m_pCursor;	//光标
};